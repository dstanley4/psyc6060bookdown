[
["making-your-data-ready-for-analysis.html", "Chapter 3 Making your data ready for analysis 3.1 Required Packages 3.2 Objective 3.3 Context 3.4 Begin with the end in mind 3.5 Data collection and entry 3.6 Experiment: Between-participant 3.7 Experiment: Within one-way 3.8 Experiment: Within N-way 3.9 Surveys: Single Occassion 3.10 Surveys: Multiple Occasions 3.11 Basic descriptive statistics", " Chapter 3 Making your data ready for analysis 3.1 Required Packages This chapter requires the following packages are installed: Required Packages apaTables janitor psych tidyverse Important Note: that you should NOT use library(psych) at any point. There are major conflicts between the psych package and the tidyverse. We will access the psych package command by preceding each command with psych:: instead of using library(psych). 3.2 Objective Advice is not right or the best - but it is a system. Encourage you to evolve your own system. But perhaps not in the first few months/years of using R until you see the benefits of this system - and correspondingly it’s shortcomings. Warning you need mastery of the Handing data in the tidyvsere chapter before doing this chapter. 3.3 Context Due to a number of high profile failure to replicate study results (Nosek 2015) it’s become increasingly clear that there is a general crisis of confidence in many areas of science (Baker 2016). Statistical (and other) explanations have been offered (Simmons, Nelson, and Simonsohn 2011) for why it’s hard to replicate results across different sets of data. However, scientists are also finding it challenging to recreate the numbers in their papers using their own data. Indeed, the editor of Molecular Brain asked authors to submit the data used to create the numbers in published papers and found that the wrong data was submitted for 40 out of 41 papers (Miyakawa 2020). Consequently, some researchers have suggested that it is critical to distinguish between replication and reproducibility (Patil P. 2019). Replication refers to trying to obtain the same result from a different data sets. Reproducibility refers to trying to obtain the same results from the same data set. Unfortunately, some authors use these two terms interchangeably and fail to make any distinction between them. I encourage you to make the distinction and the use the terms consist with use suggested by (Patil P. 2019). It may seem that reproducibility should be given - but it’s not. Correspondingly, there a trend is for journals and authors to adopt Transparency and Openness Promotion (TOP) guidelines. These guidelines involve such things as making your materials, data, code, and analysis scripts available on public repositories so anyone can check your data. A new open science journal rating system has even emerged called the TOP Factor. The idea is not that open science articles are more trustworthy that other types of articles – the idea is that trust doesn’t play a role. Anyone can inspect the data using the scripts and data provided by authors. It’s really just the same as making your science available for auditing the way financial records can be audited. But just like in the world of business some people don’t like the idea of make it possible for other to audit their work. The problems reported at Molecular Brain (doubtless is common to many journals) are likely avoided with open science - because the data and scripts needed to reproduce the numbers in the articles are uploaded prior to publication. The TOP open science guidelines have made an impact and some newer journals, such as Meta Psychology, have fully embraced open science. Figure 3.1 shows the header from an article in Meta Psychology that clearly delineates the open science attributes of the article that used computer simulations (instead of participant data). Take note that the header even specifies who checked that the analyses in the article were reproducible. FIGURE 3.1: Open science in an article header In Canada, the majority of university research is funded by the Federal Government’s Tri-Agency (i.e., NSERC, SSHRC, CIHR). The agency has a new draft Data Management Policy in which they state that “The agencies believe that research data collected with the use of public funds belong, to the fullest extent possible, in the public domain and available for reuse by others.” This perspective of the funding agency differs from that of some researchers who incorrectly believe “they own their data”. In Canada at least, the government makes it clear that tax payers fund the research so the data is public property. Additionally the Tri-Agency Data Management policy clearly indicates the responsibilities of funded researchers: \"Responsibilities of researchers include: incorporating data management best practices into their research; developing data management plans to guide the responsible collection, formatting, preservation and sharing of their data throughout the entire life cycle of a research project and beyond; following the requirements of applicable institutional and/or funding agency policies and professional or disciplinary standards; acknowledging and citing data sets that contribute to their research; and staying abreast of standards and expectations of their disciplinary community.\" As a result of this perspective on data, it’s important that you think about structuring your data for reuse by yourself and others before you collect it. Toward this end, you will see documentation of your data file via data code books is critical. 3.4 Begin with the end in mind In this chapter we will walk you though the steps from data collection, data entry, loading raw data, and the creation of data you will analyze, analytic data, via preprocessing scripts. These steps are outlined in Figure 3.2. This figure makes a clear distinction between raw data and analytic data. Raw data refers to the data as you entered it into a spreadsheet or received it from survey software. Analytic data the data the has been structured and processed so that it is ready for analysis. This pre-processing could include such things as identifying categorical variables to the computer, combining multiple items measuring the same thing into scale scale scores, among other tasks. It’s critical that you don’t think of analysis of your results as being completely removed from the data collection and data entry choices you make. Poor choices at the data collection and data entry stage can make your life substantially more complicated when it comes time to write the preprocessing script that will convert your raw data to analytic data. The mantra of this chapter is begin with the end in mind. FIGURE 3.2: Data science pipeline by Roger Peng. It’s difficult to being with the end in mind when you haven’t read later chapters. So here we will be provide you with some general thoughts around different approaches to structuring data files and the naming conventions you use when creating those data files. 3.4.1 Structuring data: Obtaining tidy data When conducting analyses in R it is typically necessary to have data in a format called tidy data (Wickham 2014). tidy data as defined by Hadley involves (among other requirements) that: Each variable forms a column. Each observation forms a row. The tidy data format can be initially challenging for some researchers to understand because it is based on thinking about, and structuring data, in terms of observations/measurements instead of participants. In this section we will describe common approaches to entering animal and human participant data and how they can be done keeping the tidy data requirement in mind. It’s not essential that data be entered in a tidy data format but it is essential that you enter data in manner that makes it easy to later convert data to a tidy data format. When dealing with animal or human participant data it’s common to enter data into a spreadsheet. Each row of the spreadsheet is typically used to represent a single participant and each column of the spreadsheet is used to represent a variable. Between participant data. Consider Table 3.1 which illustrates between participant data for six human participants running 5 kilometers. The first column is id, which indicates there are six unique participants and provides and identification number for each of them. The id is the variable and there is one observation per row - so the id column conforms to tidy data specification. The second column is sex, which is a variable, and there is one observation per for row, so sex also conforms to the tidy data specification. Finally, there is a last column five_km_time which is a variable with one observation per row – also conforming to tidy data specification. Thus, single occasion between subject data like this conforms to the tidy data specification. There is usually nothing you need to do to convert between participant data (or cross-sectional data) to be in a tidy data format. TABLE 3.1: Between participant data entered one row per participant id sex elapsed_time 1 male 40 2 female 35 3 male 38 4 female 33 5 male 42 6 female 36 Within participant data. Consider Table 3.2 which illustrates within participant data for six human participants running 5 kilometers - but on three different occasions. The first column is id, which indicates there are six unique participants and provides and identification number for each of them. The id is the variable and there is one observation per row - so the id column conforms to tidy data specification. The second column is sex, which is a variable, and there is one observation per for row, so sex also conforms to the tidy data specification. Next, there are three different columns (march, may, july) representing the levels of a single variable. That is the within subject variable is occasion and the levels of that variable are march, june, and july. The march column contains the times for participants in March. The may column contains the times for participants in May. The july column contains the times for participants in July, These three columns are not in a tidy data format. TABLE 3.2: Within participant data entered one row per participant id sex march may july 1 male 40 37 35 2 female 35 32 30 3 male 38 35 33 4 female 33 30 28 5 male 42 39 37 6 female 36 33 31 TABLE 3.3: A tidy data version of the within participant data id sex occasion elapsed_time 1 male march 40 1 male may 37 1 male july 35 2 female march 35 2 female may 32 2 female july 30 3 male march 38 3 male may 35 3 male july 33 4 female march 33 4 female may 30 4 female july 28 5 male march 42 5 male may 39 5 male july 37 6 female march 36 6 female may 33 6 female july 31 The problem with the format of the data in Table 3.2 is that march, may, and july are levels of single variable, occasion, that is not represented in the data. Nowhere in the Table 3.2 can you see the label occasion. This single variable is presented over three columns - a very confusing situation. Moreover, due to the way the columns are labeled it’s not clear what is being measured. Nowhere in Table 3.2 can you see the variable elapsed_time. Thus with the format used in 3.2 you don’t know what the predictor (occasion) is nor do you know the dependent variable (elapsed_time.). Thus, a major problem with entering data in this format is that there are hidden variables in the data and you need insider knowledge to know the columns represent. That said, this is not necessarily a terrible way to enter your data as long as you have all of this missing information documented in a data code book. Disadvantages one row per participant Advantages one row per participant 1) Predictor variable (occasion) is hidden and spread over multiple columns 1) Easy to enter this way 2) Unclear that each month is a level of the predictor variable occasion 3) Dependent variable (elapsed_time) is not indicated 4) Unclear that elapsed_time is the measurement in each month column Fortunately, the problems with Table 3.2 can be largely resolved by converting the data to the a tidy data format. This can be done with the pivot_long() command that we will learn about later in the chapter. Thus, we can enter the data in the easy to enter format of Table 3.2 but then later convert it to a tidy data format. After this conversion the data will be appear as in Table 3.3. For elapsed_time variable this data is now in the tidy data format. Each row corresponds to a single elapsed_time observed. Each column corresponds to a single variable. Somewhat problematically, however, sex is repeated three times for each person (i.e., over the three rows) - and this can be confusing. However, if the focus in on analyzing elapsed time this tidy data format makes sense. Importantly, there is an id column for each participant so R knows that this information is repeated for each participant and is not confused by the repeating the sex designation over three rows. In directly, this illustrates the importance of having an id column to indicate each unique participant. Why did we walk you through this technical treatment of structuring data within the computer at this point in time? So that you pay attention to the advice the follows. You can see at this point that you may well need to restructure your data for certain analyses. The ability to do so quickly and easily depends upon you following the advice in the rest of this chapter around the naming conventions for variables and other aspects of your analyses. You can imagine the challenges for converting the data in Figure 3.2 to the data in Figure 3.3 by hand. You want to be able to automate that process and others - which is made substantially easier if you following the forthcoming advice about naming conventions in the tidyverse. 3.5 Data collection and entry Data can be collected in a wide variety of way. Regardless of the methods of location researchers typically come to data in one of two way: 1) a research assistant enters the data into a spreadsheet type interface, or 2) the data is obtained as the output from computer software (e.g., Qualtrics, SurveyMonkey, Noldus, etc.). Regardless of the approach it is critical to name your variables appropriately. For spreadsheet users, this mean setting of the spreadsheet the data will be recorded in with column names that are amenable to the future analyses you want to conduct. Likewise, for software uses, this means setting up the software prior to running the experiment/survey to that when the data is exported for analysis the column names you obtain are amenable to subsequent analyses approaches. Although failure to take this thoughtful approach in advance can be overcome - it is only overcome with substantial manual effort. Therefore, as noted previously, we strongly encourage you to following the naming conventions we espouse here where you set up your data recording regime. Additionally, we encourage you to give careful thought in advance to the codes you will use to record missing data. 3.5.1 Naming conventions To make your life easier down the road, it is critical you set up your spreadsheet or online survey such that is uses a naming convention prior to data collection. The naming conventions suggested here are adapted from the tidyverse style guide. Lowercase letters only If two word column names are necessary, only use the underscore (\"_\") character to separate words in the name. Avoid short uncontextualized variable names like q1, q2, q3, etc. Do use moderate length column names. Aim to achieve a unique prefix for related columns so that those columns can be selected using the starts_with() command. Be sure to avoid short two or three letter prefixes for item names. Use moderate length unique item prefixes so that it will easy to select with those columns using start_with() in that you don’t accidentally get additionally columns you don’t want - that have a similar prefix. See Likert-type item section below for details. If you have a column name that represents levels of two repeated measures variables only use the underscore character to separate the levels of the different variables. See within-participant ANOVA section below for details. 3.5.2 Likert-type items A Likert-type item is typically composed of a statement that participants are asked to agree or disagree with. For example, participants could be asked to indicate the extent to which they agree a number of statements such as “I like my job”. They would then be presented with response scale such as: 1 - Strongly Disagree, 2 - Moderately Disagree, 3 - Neutral, 4, Moderately Agree, 5 - Strongly Agree. A common question is how should I enter the data? Enter numeric responses not the labels. You should enter the numeric value for each item response (e.g., 5) into your data - not the label (e.g., Strongly Agree). The labels associated with each value can be applied later in a script, if needed. High numbers should be associated with more of the construct being measured. When designing your survey or data collection tools, it is important that you set of the response options appropriately. If you scale measures job satisfaction, it is important that you collect data in a manner that ensures high numbers on the job satisfaction scale indicate high levels of job satisfaction. Therefore, assigning numbers make sense using the 5-point scale: 1 - Strongly Disagree, 2 - Moderately Disagree, 3 - Neutral, 4, Moderately Agree, 5 - Strongly Agree. With this approach high response numbers indicate more job satisfaction. However, using the opposite scale would not make sense: 1 - Strongly Agree, 2 - Moderately Agree, 3 - Neutral, 4, Moderately Disagree, 5 - Strongly Disagree. With this opposite scale high numbers on a job satisfaction scale would indicate lower levels of job satisfaction - a very confusing situation. Avoid this situation, assign numbers so that higher numbers are associated with more of the construct being measured. Use appropriate item names. As described in the naming convention section, use moderate length names with different labels for each subscale. Use moderate length column names unique to each subscale. Imagine you have a survey with an 18-item commitment scale (Meyer, Allen, and Smith 1993) composed of three 6-item subscales: affective, normative, and continuance commitment. It would be a poor choice to prefix the labels of all 18 columns in your data with “commit” such that the names would be commit1, commit2, commit3, etc. The problem with this approach is that it fails to distinguishing between the three subscales in naming convention; making it impossible to select the items for a single subscale using starts_with(). A better, but still poor choice for a naming convention would be use use a two letter prefix for the three scale such ac, nc, and cc. This would result in names for the columns like ac1, ac2, ac3, etc. This is an improvement because you could apparently (but likely not) select the columns using starts_with(“ac”). The problem with these short names is that there could be many columns in data set that start with “ac” beside the affective commitment items. You might want to select the affective commitment items using starts_with(“ac”); but you would get all the affective commitment item columns but also all the columns measuring other variables that also start with “ac”. Therefore, it’s a good idea to use a moderate length unique prefix for column names. For example, you might use prefixes like affectcom, normcom, and contincom for the three subscales. This would create column names like affectcom1, affectcom2, affectcom3, etc. These column prefixes are unlikely to be duplicated in other places in your column name conventions making it easy to select those columns using a command like starts_with(“affectcom”). Indicate in the item name if the item is reversed keyed Sometimes with Likert-type items, an item is reverse keyed. For example, on a job satisfaction scale participants will typically respond to items that reflect job satisfaction using the scale: 1 - Strongly Disagree, 2 - Moderately Disagree, 3 - Neutral, 4, Moderately Agree, 5 - Strongly Agree. Higher numbers indicate more job satisfaction. Sometimes however, some items will use the same 1 to 5 response scale but be worded “I hate my job”. Responding with a 5 to this item would indicate high job dissatisfaction not high job satisfaction - to the response will need to be flipped in your analysis script after data collection (i.e., 1 need to become a 5 and vice versa). To make it easier to do so, you should indicate if an item is reverse keyed in the item name. The procedure for doing so is outlined in the next point. Indicate in the item name the range for reverse key items. If an item is reverse-keyed, the process for the flipping the scores depends upon the range of a scale. Although 5-point scale are common, any number of points are possible. The process for correcting a reverse key item depends upon: 1) the number of points on the scale, and 2) the range of the points on the scale. The reverse-key item correction process is different for an item that uses a 5-point scale ranging from 1 to 5 and from 0 to 4. Both are 5-point scale but your correction process will be different. Therefore, for reverse key items add as suffix at the end of each item name that indicates an item is reverse keyed and the range of the item. For example, if the third job satisfaction item was reversed keyed on scale using a 1 to 5 response format you might name the item: jobsat3_rev15. The suffix \"_rev15\" indicates the item is reverse keyed and the range of responses used on the item is 1 to 5. Be sure to set up your survey with this naming convention when you collect your data. If you collect items over multiple time points use a prefix with a short code to indicate the time followed by and underscore. For example, if you had a multi-item self-esteem scale you might call the column for the firs time “t1_esteem1_rev15”. This indicate that you have for time 1 (t1), the first self-esteem item (esteem1) and that item is reverse keyed on a 1 to 5 scale. 3.5.3 ANOVA between-participant levels Avoid numerical representation of categorical variables. Don’t use 1 or 2 to represent sex. Use male and female in your spreadsheet - likewise in your survey program. Likewise, for between participant variables drug_condition don’t use 1 or 2 use “drug” and “placebo” but the actually drug name would be better.s 3.5.4 ANOVA within-participant levels If you have a study that involves a within-participant ANOVA. One-way repeated measure predictor. == See example above with run times. Multi-way repeated measures predictors. If you have a column name that represents levels of two repeated measures variables only use the underscore character to separate the levels of the different variables. For example, if imagine you are a food researcher interested in taste ratings as a dependent various foods and contexts. You have food type (i.e., food_type) as a predictor with three levels (pizza, steak, burger). You have a second predictor temperature with two levels (hot, cold). All participants taste all foods at all temperatures. Thus, six columns are required for each participant: pizza_hot, pizza_cold, steak_hot, steak_cold, burger_hot, and burger_cold. Notice how each name contains one level of each predictor variable. The levels by the two predictor variables are separated by a single underscore. This should the only underscore in the variable name because that underscore will be used by the computer when changing the data to the tidy format. If you had two underscores an name like “italian_pizza_hot” you would confuse the pivot_longer() command when it attempts to create a tidy version of the data. The computer would think there were three repeated levels variables instead of two. Thus, when dealing with repeated measures predictors, only use underscores to separate levels of predictor variables. 3.5.5 Other types of information. education, income, etc 3.5.6 Working the examples Below we present example scripts transforming raw data to analytic data for various study designs (experimental and survey). These scripts illustrate the value of using the naming conventations outlined previously. Follow along with the projects by placing the data in your R Studio project folder and typing your own script. Resist the urge to cut and paste from this document. After learning and teaching scripting for years, there we’ve found there is substantial bennefit to the process of simply typing the script yourself. Setup an R Studio project using one of these approaches: R Studio in the Cloud Assignment 1. The data should be in the assignment project automatically. Just start the assignment. R Studio in the Cloud, custom project 1. Create a new Project using the web interface 2. Upload your data files in using the upload button in the Files pane R Studio Local Computer, custom project 1. Create a folder on your computer for the analysis 2. Place your data files in that folder 3. Use the menu item File &gt; New Project… to start the project 4. On the window that appears select “Existing Directory” 5. On the next screen, press the “Browse” button and find/select the folder with your data 6. Press the Create Project Button Regardless of whether your are working from the cloud or locally you should now have an R Studio project with your data files in it. Using Projects. As you read each of these example scripts pay attention to the redundancy. Regardless of the of the type of data you analyze there is a great deal of consistency in terms of how all of the scripts start. Pay particular attention to XXXX where the reearcher assistant didn’t fllow and sex as 1 and 3.6 Experiment: Between-participant # Date: YYYY-MM-DD # Name: your name here # Example: Between-participant experiment # Load data library(tidyverse) my_missing_value_codes &lt;- c(&quot;-999&quot;, &quot;&quot;, &quot;NA&quot;) raw_data_beween &lt;- read_csv(file = &quot;data_ex_between.csv&quot;, na = my_missing_value_codes) ## Parsed with column specification: ## cols( ## id = col_double(), ## sex = col_character(), ## elapsed_time = col_double() ## ) analytic_data_between &lt;- raw_data_beween library(janitor) ## ## Attaching package: &#39;janitor&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test # Initial cleaning analytic_data_between &lt;- analytic_data_between %&gt;% remove_empty(&quot;rows&quot;) %&gt;% remove_empty(&quot;cols&quot;) %&gt;% clean_names() You can confirm the column names following our naming convention with the glimpse command - and see the data type for each column. glimpse(analytic_data_between) ## Rows: 6 ## Columns: 3 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot; ## $ elapsed_time &lt;dbl&gt; 40, 35, 38, 33, 42, 36 3.6.1 Converting categorical variables to factors Following initial cleaning, identify categorical variables as factors. If you plan to conduct an ANOVA - it’s critical that all predictor variables are converted to factors. Inspect glimpse() output - if you followed our data entry naming conventions categorical variables should be of the type character. We have one variable sex that is categorical that is of type character (i.e., chr). The participant id column is categorical as well, but of type double (i.e., dbl) which is a numeric column. glimpse(analytic_data_between) ## Rows: 6 ## Columns: 3 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot; ## $ elapsed_time &lt;dbl&gt; 40, 35, 38, 33, 42, 36 You can quickly convert all character columns to factors using the text below: # Turn all columns that are of type character into factors analytic_data_between &lt;- analytic_data_between %&gt;% mutate(across(.cols = where(is.character), .fns = as_factor)) The participant identification number in the id column is a numeric column, so we have handle that column on it’s own. analytic_data_between &lt;-analytic_data_between %&gt;% mutate(id = as.factor(id)) You can ensure all of these columns are now factors using the glimpse() command. glimpse(analytic_data_between) ## Rows: 6 ## Columns: 3 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;fct&gt; male, female, male, female, male, female ## $ elapsed_time &lt;dbl&gt; 40, 35, 38, 33, 42, 36 Inspect the output of the glimpse() command and make sure you have coverted all categorical variables to factors - especially those you will use as predictors. 3.6.2 Levels of factors The order of the levels of factors influences how text output and graphs are generated. You can see the order of the factor levels using: analytic_data_between %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex ## 1:1 male :3 ## 2:1 female:3 ## 3:1 ## 4:1 ## 5:1 ## 6:1 The sex column has two levels: male and female in that order. Below we adjust the order of the sex varible because we want the x-axis of a future graph to display columns in the left to right order: female, male. # Custom reordering of factor levels analytic_data_between &lt;- analytic_data_between %&gt;% mutate(sex = fct_relevel(sex, &quot;female&quot;, &quot;male&quot;)) You can see the new order of the factor levels with summary(): analytic_data_between %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex ## 1:1 female:3 ## 2:1 male :3 ## 3:1 ## 4:1 ## 5:1 ## 6:1 You now have a between-participant analytic data set. 3.7 Experiment: Within one-way # Date: YYYY-MM-DD # Name: your name here # Example: Within-participant experiment # Load data library(tidyverse) my_missing_value_codes &lt;- c(&quot;-999&quot;, &quot;&quot;, &quot;NA&quot;) raw_data_within &lt;- read_csv(file = &quot;data_ex_within.csv&quot;, na = my_missing_value_codes) ## Parsed with column specification: ## cols( ## id = col_double(), ## sex = col_character(), ## march = col_double(), ## may = col_double(), ## july = col_double() ## ) analytic_data_within &lt;- raw_data_within library(janitor) # Initial cleaning analytic_data_within &lt;- analytic_data_within %&gt;% remove_empty(&quot;rows&quot;) %&gt;% remove_empty(&quot;cols&quot;) %&gt;% clean_names() You can confirm the column names following our naming convention with the glimpse command - and see the data type for each column. glimpse(analytic_data_within) ## Rows: 6 ## Columns: 5 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot; ## $ march &lt;dbl&gt; 40, 35, 38, 33, 42, 36 ## $ may &lt;dbl&gt; 37, 32, 35, 30, 39, 33 ## $ july &lt;dbl&gt; 35, 30, 33, 28, 37, 31 3.7.1 Converting categorical variables to factors Following initial cleaning, identify categorical variables as factors. If you plan to conduct an ANOVA - it’s critical that all predictor variables are converted to factors. Inspect glimpse() output - if you followed our data entry naming conventions categorical variables should be of the type character. We have one variable sex that is categorical that is of type character (i.e., chr). The participant id column is categorical as well, but of type double (i.e., dbl) which is a numeric column. Importantly, note that we have a categorical variable that is missing because our data is not in the tidy data format. The predictor “occassion” (levels: march, may, and july) is missing. The levels for occasion are distributed over three columns. We will have to fix this later. For now we focus on the sex and id columns. glimpse(analytic_data_within) ## Rows: 6 ## Columns: 5 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot; ## $ march &lt;dbl&gt; 40, 35, 38, 33, 42, 36 ## $ may &lt;dbl&gt; 37, 32, 35, 30, 39, 33 ## $ july &lt;dbl&gt; 35, 30, 33, 28, 37, 31 You can quickly convert all character columns to factors using the text below. # Turn all columns that are of type character into factors analytic_data_within &lt;- analytic_data_within %&gt;% mutate(across(.cols = where(is.character), .fns = as_factor)) The participant identification number in the id column is a numeric column, so we have handle that column on it’s own. analytic_data_within &lt;-analytic_data_within %&gt;% mutate(id = as.factor(id)) You can ensure all of these columns are now factors using the glimpse() command. glimpse(analytic_data_within) ## Rows: 6 ## Columns: 5 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;fct&gt; male, female, male, female, male, female ## $ march &lt;dbl&gt; 40, 35, 38, 33, 42, 36 ## $ may &lt;dbl&gt; 37, 32, 35, 30, 39, 33 ## $ july &lt;dbl&gt; 35, 30, 33, 28, 37, 31 Inspect the output of the glimpse() command and make sure you have coverted all categorical variables to factors - especially those you will use as predictors. 3.7.2 Levels of factors The order of the levels of factors influences how text output and graphs are generated. You can see the order of the factor levels using: analytic_data_within %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex ## 1:1 male :3 ## 2:1 female:3 ## 3:1 ## 4:1 ## 5:1 ## 6:1 Here we adjust the order of the sex varible because we want the x-axis of a future graph to display columns in the left to right order: female, male. # Custom reordering of factor levels analytic_data_within &lt;- analytic_data_within %&gt;% mutate(sex = fct_relevel(sex, &quot;female&quot;, &quot;male&quot;)) You can see the new order of the factor levels with summary(): analytic_data_within %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex ## 1:1 female:3 ## 2:1 male :3 ## 3:1 ## 4:1 ## 5:1 ## 6:1 3.7.3 Pivot to tidy data print(analytic_data_within) ## # A tibble: 6 x 5 ## id sex march may july ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 male 40 37 35 ## 2 2 female 35 32 30 ## 3 3 male 38 35 33 ## 4 4 female 33 30 28 ## 5 5 male 42 39 37 ## 6 6 female 36 33 31 analytic_data_within_tidy &lt;- analytic_data_within %&gt;% pivot_longer(march:july, names_to = &quot;occasion&quot;, values_to = &quot;elapsed_time&quot; ) print(analytic_data_within_tidy) ## # A tibble: 18 x 4 ## id sex occasion elapsed_time ## &lt;fct&gt; &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 male march 40 ## 2 1 male may 37 ## 3 1 male july 35 ## 4 2 female march 35 ## 5 2 female may 32 ## 6 2 female july 30 ## 7 3 male march 38 ## 8 3 male may 35 ## 9 3 male july 33 ## 10 4 female march 33 ## 11 4 female may 30 ## 12 4 female july 28 ## 13 5 male march 42 ## 14 5 male may 39 ## 15 5 male july 37 ## 16 6 female march 36 ## 17 6 female may 33 ## 18 6 female july 31 analytic_data_within_tidy &lt;-analytic_data_within_tidy %&gt;% mutate(occasion = as.factor(occasion)) glimpse(analytic_data_within) ## Rows: 6 ## Columns: 5 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;fct&gt; male, female, male, female, male, female ## $ march &lt;dbl&gt; 40, 35, 38, 33, 42, 36 ## $ may &lt;dbl&gt; 37, 32, 35, 30, 39, 33 ## $ july &lt;dbl&gt; 35, 30, 33, 28, 37, 31 3.8 Experiment: Within N-way # Date: YYYY-MM-DD # Name: your name here # Example: Within-participant experiment # Load data library(tidyverse) my_missing_value_codes &lt;- c(&quot;-999&quot;, &quot;&quot;, &quot;NA&quot;) raw_data_food &lt;- read_csv(file = &quot;data_food.csv&quot;, na = my_missing_value_codes) ## Parsed with column specification: ## cols( ## id = col_double(), ## sex = col_double(), ## pizza_hot = col_double(), ## pizza_cold = col_double(), ## steak_hot = col_double(), ## steak_cold = col_double(), ## burger_hot = col_double(), ## burger_cold = col_double() ## ) analytic_data_food &lt;- raw_data_food library(janitor) # Initial cleaning analytic_data_food &lt;- analytic_data_food %&gt;% remove_empty(&quot;rows&quot;) %&gt;% remove_empty(&quot;cols&quot;) %&gt;% clean_names() You can confirm the column names following our naming convention with the glimpse command - and see the data type for each column. glimpse(analytic_data_food) ## Rows: 6 ## Columns: 8 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;dbl&gt; 1, 2, 1, 2, 1, 2 ## $ pizza_hot &lt;dbl&gt; 7, 8, 7, 8, 7, 9 ## $ pizza_cold &lt;dbl&gt; 6, 7, 5, 7, 6, 7 ## $ steak_hot &lt;dbl&gt; 6, 6, 7, 7, 8, 7 ## $ steak_cold &lt;dbl&gt; 3, 3, 4, 5, 7, 8 ## $ burger_hot &lt;dbl&gt; 7, 8, 7, 8, 7, 8 ## $ burger_cold &lt;dbl&gt; 4, 3, 3, 3, 2, 5 3.8.1 Converting categorical variables to factors Following initial cleaning, identify categorical variables as factors. If you plan to conduct an ANOVA - it’s critical that all predictor variables are converted to factors. Inspect glimpse() output - if you followed our data entry naming conventions categorical variables should be of the type character glimpse(analytic_data_food) ## Rows: 6 ## Columns: 8 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;dbl&gt; 1, 2, 1, 2, 1, 2 ## $ pizza_hot &lt;dbl&gt; 7, 8, 7, 8, 7, 9 ## $ pizza_cold &lt;dbl&gt; 6, 7, 5, 7, 6, 7 ## $ steak_hot &lt;dbl&gt; 6, 6, 7, 7, 8, 7 ## $ steak_cold &lt;dbl&gt; 3, 3, 4, 5, 7, 8 ## $ burger_hot &lt;dbl&gt; 7, 8, 7, 8, 7, 8 ## $ burger_cold &lt;dbl&gt; 4, 3, 3, 3, 2, 5 You can quickly convert all character columns to factors using the text below: # Turn all columns that are of type character into factors analytic_data_food &lt;- analytic_data_food %&gt;% mutate(across(.cols = where(is.character), .fns = as_factor)) The participant identification number in the id column is a numeric column, so we have handle that column on it’s own. analytic_data_food &lt;-analytic_data_food %&gt;% mutate(id = as.factor(id)) You can ensure all of these columns are now factors using the glimpse() command. glimpse(analytic_data_food) ## Rows: 6 ## Columns: 8 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;dbl&gt; 1, 2, 1, 2, 1, 2 ## $ pizza_hot &lt;dbl&gt; 7, 8, 7, 8, 7, 9 ## $ pizza_cold &lt;dbl&gt; 6, 7, 5, 7, 6, 7 ## $ steak_hot &lt;dbl&gt; 6, 6, 7, 7, 8, 7 ## $ steak_cold &lt;dbl&gt; 3, 3, 4, 5, 7, 8 ## $ burger_hot &lt;dbl&gt; 7, 8, 7, 8, 7, 8 ## $ burger_cold &lt;dbl&gt; 4, 3, 3, 3, 2, 5 Inspect the output of the glimpse() command and make sure you have coverted all categorical variables to factors - especially those you will use as predictors. 3.8.2 Levels of factors The order of the levels of factors influences how text output and graphs are generated. You can see the order of the factor levels using: analytic_data_food %&gt;% select(where(is.factor)) %&gt;% summary() ## id ## 1:1 ## 2:1 ## 3:1 ## 4:1 ## 5:1 ## 6:1 Here we adjust the order of the sex varible because we want the x-axis of a future graph to display columns in the left to right order: intersex, female, male. # Custom reordering of factor levels analytic_data_food &lt;- analytic_data_food %&gt;% mutate(sex = fct_relevel(sex, &quot;female&quot;, &quot;male&quot;)) You can see the new order of the factor levels with summary(): analytic_data_food %&gt;% select(where(is.factor)) %&gt;% summary() ## id ## 1:1 ## 2:1 ## 3:1 ## 4:1 ## 5:1 ## 6:1 analytic_food_tidy &lt;- analytic_data_food %&gt;% pivot_longer(pizza_hot:burger_cold, names_to = c(&quot;food&quot;, &quot;temperature&quot;), names_sep = &quot;_&quot;, values_to = &quot;taste&quot; ) print(analytic_food_tidy) ## # A tibble: 36 x 5 ## id sex food temperature taste ## &lt;fct&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 1 pizza hot 7 ## 2 1 1 pizza cold 6 ## 3 1 1 steak hot 6 ## 4 1 1 steak cold 3 ## 5 1 1 burger hot 7 ## 6 1 1 burger cold 4 ## 7 2 2 pizza hot 8 ## 8 2 2 pizza cold 7 ## 9 2 2 steak hot 6 ## 10 2 2 steak cold 3 ## # … with 26 more rows # Turn all columns that are of type character into factors analytic_food_tidy &lt;- analytic_food_tidy %&gt;% mutate(across(.cols = where(is.character), .fns = as_factor)) # sex is numeric so must be done the hard way analytic_food_tidy &lt;- analytic_food_tidy %&gt;% mutate(sex = as_factor(sex)) # establish that 1 indicates males and 2 indicates females analytic_food_tidy &lt;- analytic_food_tidy %&gt;% mutate(sex = fct_recode(sex, male = &quot;1&quot;, female = &quot;2&quot;)) # see order of factors analytic_food_tidy %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex food temperature ## 1:6 male :18 pizza :12 hot :18 ## 2:6 female:18 steak :12 cold:18 ## 3:6 burger:12 ## 4:6 ## 5:6 ## 6:6 # set order of factors for x-axis or legend analytic_food_tidy &lt;- analytic_food_tidy %&gt;% mutate(sex = fct_relevel(sex, &quot;female&quot;, &quot;male&quot;)) # see order of factors analytic_food_tidy %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex food temperature ## 1:6 female:18 pizza :12 hot :18 ## 2:6 male :18 steak :12 cold:18 ## 3:6 burger:12 ## 4:6 ## 5:6 ## 6:6 3.9 Surveys: Single Occassion Even assuming you did everything right there is still a fair amount of work to get things started paragraph here… We begin by examining the data as originally entered into a spreadsheet. In Figure 3.3 you see a screen shot of the initial raw data as a researcher might receive it. Take careful note of the numerous -999 values used to indicate missing values. As part of creating the analytic data that we will analyze we need to indicate to the computer that the -999 are not data but codes to represent missing values. FIGURE 3.3: Raw data for item scoring Create a new script in your project and save it with the name “script_raw_to_analytic.R” Type the code below into that script # Date: YYYY-MM-DD # Name: your name here # Example: single occasion survey # Load data library(tidyverse) my_missing_value_codes &lt;- c(&quot;-999&quot;, &quot;&quot;, &quot;NA&quot;) raw_data_survey &lt;- read_csv(file = &quot;data_item_scoring.csv&quot;, na = my_missing_value_codes) ## Parsed with column specification: ## cols( ## id = col_double(), ## age = col_double(), ## sex = col_character(), ## eye_color = col_character(), ## esteem1 = col_double(), ## esteem2 = col_double(), ## esteem3 = col_double(), ## esteem4 = col_double(), ## esteem5_rev15 = col_double(), ## jobsat1 = col_double(), ## jobsat2_rev15 = col_double(), ## jobsat3 = col_double(), ## jobsat4 = col_double(), ## jobsat5 = col_double() ## ) analytic_data_survey &lt;- raw_data_survey Remove empty row and columns from your data using the remove_empty_cols() and remove_empty_rows(), respectively. As well, clean the names of your columns to ensure they conform to tidyverse naming conventions. library(janitor) # Initial cleaning analytic_data_survey &lt;- analytic_data_survey %&gt;% remove_empty(&quot;rows&quot;) %&gt;% remove_empty(&quot;cols&quot;) %&gt;% clean_names() You can confirm the column names following our naming convention with the glimpse command - and see the data type for each column. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, 17,… ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;… ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;brown&quot;, &quot;hazel&quot;, &quot;blue&quot;, NA, &quot;hazel&quot;, &quot;blue&quot;, … ## $ esteem1 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4, NA, NA, 3, 3, 3, 3,… ## $ esteem2 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, NA, 3, 2, 2, 2, 2, … ## $ esteem3 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, 4, 4, NA, 4, NA, NA, … ## $ esteem4 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, 4, 3, 3, 4, NA, 3, 3,… ## $ esteem5_rev15 &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2, 3, 2, 2, 3, 3, NA, 3, 3… ## $ jobsat1 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 3… ## $ jobsat2_rev15 &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 2, 3, … ## $ jobsat3 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, … ## $ jobsat4 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA, 5, 4, 4, 4, 5, 4, 3… ## $ jobsat5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, NA, 4, 5, 4, 4, 4, 4,… 3.9.1 Converting categorical variables to factors Following initial cleaning, identify categorical variables as factors. If you plan to conduct an ANOVA - it’s critical that all predictor variables are converted to factors. Inspect glimpse() output - if you followed our data entry naming conventions categorical variables should be of the type character glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, 17,… ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;… ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;brown&quot;, &quot;hazel&quot;, &quot;blue&quot;, NA, &quot;hazel&quot;, &quot;blue&quot;, … ## $ esteem1 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4, NA, NA, 3, 3, 3, 3,… ## $ esteem2 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, NA, 3, 2, 2, 2, 2, … ## $ esteem3 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, 4, 4, NA, 4, NA, NA, … ## $ esteem4 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, 4, 3, 3, 4, NA, 3, 3,… ## $ esteem5_rev15 &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2, 3, 2, 2, 3, 3, NA, 3, 3… ## $ jobsat1 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 3… ## $ jobsat2_rev15 &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 2, 3, … ## $ jobsat3 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, … ## $ jobsat4 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA, 5, 4, 4, 4, 5, 4, 3… ## $ jobsat5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, NA, 4, 5, 4, 4, 4, 4,… You can quickly convert all character columns to factors using the text below: # Turn all columns that are of type character into factors analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(across(.cols = where(is.character), .fns = as_factor)) The participant identification number in the id column is a numeric column, so we have handle that column on it’s own. analytic_data_survey &lt;-analytic_data_survey %&gt;% mutate(id = as.factor(id)) You can ensure all of these columns are now factors using the glimpse() command. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, 17,… ## $ sex &lt;fct&gt; male, female, male, female, male, female, male, female,… ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, hazel, blue, brown, hazel… ## $ esteem1 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4, NA, NA, 3, 3, 3, 3,… ## $ esteem2 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, NA, 3, 2, 2, 2, 2, … ## $ esteem3 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, 4, 4, NA, 4, NA, NA, … ## $ esteem4 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, 4, 3, 3, 4, NA, 3, 3,… ## $ esteem5_rev15 &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2, 3, 2, 2, 3, 3, NA, 3, 3… ## $ jobsat1 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 3… ## $ jobsat2_rev15 &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 2, 3, … ## $ jobsat3 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, … ## $ jobsat4 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA, 5, 4, 4, 4, 5, 4, 3… ## $ jobsat5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, NA, 4, 5, 4, 4, 4, 4,… Inspect the output of the glimpse() command and make sure you have coverted all categorical variables to factors - especially those you will use as predictors. 3.9.2 Levels of factors The order of the levels of factors influences how text output and graphs are generated. You can see the order of the factor levels using: analytic_data_survey %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex eye_color ## 1 : 1 male :147 blue : 99 ## 2 : 1 female :149 brown: 98 ## 3 : 1 intersex: 2 hazel:100 ## 4 : 1 NA&#39;s : 2 NA&#39;s : 3 ## 5 : 1 ## 6 : 1 ## (Other):294 Here we adjust the order of the sex varible because we want the x-axis of a future graph to display columns in the left to right order: intersex, female, male. # Custom reordering of factor levels analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(sex = fct_relevel(sex, &quot;intersex&quot;, &quot;female&quot;, &quot;male&quot;)) For eye color, we want to future graph to be have the most commmon eye colors on the left so we reorder the factor levels: # Reordering factor levels by frequency analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(eye_color = fct_infreq(eye_color)) You can see the new order of the factor levels with summary(): analytic_data_survey %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex eye_color ## 1 : 1 intersex: 2 hazel:100 ## 2 : 1 female :149 blue : 99 ## 3 : 1 male :147 brown: 98 ## 4 : 1 NA&#39;s : 2 NA&#39;s : 3 ## 5 : 1 ## 6 : 1 ## (Other):294 3.9.3 Checking numerical variables analytic_data_survey %&gt;% select(where(is.numeric)) %&gt;% summary() ## esteem1 esteem2 esteem3 ## Min. :3.000 Min. :2.000 Min. :3.000 ## 1st Qu.:3.000 1st Qu.:2.000 1st Qu.:4.000 ## Median :3.000 Median :2.000 Median :4.000 ## Mean :3.391 Mean :2.353 Mean :3.963 ## 3rd Qu.:4.000 3rd Qu.:3.000 3rd Qu.:4.000 ## Max. :5.000 Max. :3.000 Max. :5.000 ## NA&#39;s :24 NA&#39;s :28 NA&#39;s :31 3.9.4 Create Scale Scores Likert caveats. Depending on your research area, there are very different perspectives on how to analyze Likert-type items. The perspectives differ based on how they view the level of measurement associated with the Likert-type items. One perspective, common in Psychology, is that the numbers corresponding to each response option are of the interval type. This mean that the psychological difference between each response option perfectly corresponds to the numerical difference between each response option. That is, the psychological difference between Strongly Agree and Moderately Agree is equal to the psychological difference between Moderately Agree and Neutral, and so on. Now it looks like our data is ready for the creation of scale scores: glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, 17,… ## $ sex &lt;fct&gt; male, female, male, female, male, female, male, female,… ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, hazel, blue, brown, hazel… ## $ esteem1 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4, NA, NA, 3, 3, 3, 3,… ## $ esteem2 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, NA, 3, 2, 2, 2, 2, … ## $ esteem3 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, 4, 4, NA, 4, NA, NA, … ## $ esteem4 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, 4, 3, 3, 4, NA, 3, 3,… ## $ esteem5_rev15 &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2, 3, 2, 2, 3, 3, NA, 3, 3… ## $ jobsat1 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 3… ## $ jobsat2_rev15 &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 2, 3, … ## $ jobsat3 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, … ## $ jobsat4 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA, 5, 4, 4, 4, 5, 4, 3… ## $ jobsat5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, NA, 4, 5, 4, 4, 4, 4,… 3.9.4.1 Dealing with reverse key items Our first step is dealing with reverse key items. The way you deal with these items depends on how you scored them. Imagine you had a 5-point scale. You could have scored the scale with the values 1, 2, 3, 4, and 5. Alternatively, you could have scored the scale with the values 0, 1, 2, 3, and 4. In this example, we scored the data using the 1 to 5 system. So we’ll use that. Later I’ll show you how to deal with the other scoring system (0 to 4). 3.9.5 Scoring items where the ratings scale starts with 1 We need to take items that were reversed-key when the participant wrote them and recode those responses. We do that with using the mutate command from the dplyr package. In this data file the only reverse-key item was SE7 (we known this from when we created the survey). We use the command below to reverse key an item with response options ranging from 1 to 5. So we use 6 in the command (i.e., one higher than 5). analytic_data_survey %&gt;% select(ends_with(&quot;_rev15&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 2 ## $ esteem5_rev15 &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2, 3, 2, 2, 3, 3, NA, 3, 3… ## $ jobsat2_rev15 &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 2, 3, … analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(6 - across(.cols = ends_with(&quot;_rev15&quot;)) ) %&gt;% rename_with(.fn = str_remove, .cols = ends_with(&quot;_rev15&quot;), pattern = &quot;_rev15&quot;) The command above creates a new column in analytic_data called SE7c that has the reverse-keyed values for SE7 in it. You can see the new SE7c column using command below that displays the first six rows of the data. The SE7c column is at the far right of the data displayed. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, 17, NA,… ## $ sex &lt;fct&gt; male, female, male, female, male, female, male, female, mal… ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, hazel, blue, brown, hazel, bl… ## $ esteem1 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4, NA, NA, 3, 3, 3, 3, 3, … ## $ esteem2 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, NA, 3, 2, 2, 2, 2, 3, 2… ## $ esteem3 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, 4, 4, NA, 4, NA, NA, 3, 4… ## $ esteem4 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, 4, 3, 3, 4, NA, 3, 3, 4, … ## $ esteem5 &lt;dbl&gt; 4, 4, 4, 4, 4, NA, NA, 4, 4, 4, 3, 4, 4, 3, 3, NA, 3, 3, NA… ## $ jobsat1 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 3, 3,… ## $ jobsat2 &lt;dbl&gt; 5, 5, 5, NA, 5, 5, 4, 5, 4, 4, 3, 5, 3, 4, 5, 5, 4, 3, 5, 4… ## $ jobsat3 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 3, 3… ## $ jobsat4 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA, 5, 4, 4, 4, 5, 4, 3, 4,… ## $ jobsat5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, NA, 4, 5, 4, 4, 4, 4, 5, … Note FOR A BOX . If you had used response options numbered 0 to 4 for each item you would use the command below instead. Note that we use 4 in the command this time instead of a value one higher. analytic_data_survey &lt;- mutate(analytic_data_survey, esteem7c = 4 - SE7) 3.9.6 Creating the scale scores analytic_data_items &lt;- analytic_data_survey # confirm select will select the columns you want (and not others) analytic_data_survey %&gt;% select(starts_with(&quot;esteem&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 5 ## $ esteem1 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4, NA, NA, 3, 3, 3, 3, 3, NA… ## $ esteem2 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, NA, 3, 2, 2, 2, 2, 3, 2, … ## $ esteem3 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, 4, 4, NA, 4, NA, NA, 3, 4, … ## $ esteem4 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, 4, 3, 3, 4, NA, 3, 3, 4, 3,… ## $ esteem5 &lt;dbl&gt; 4, 4, 4, 4, 4, NA, NA, 4, 4, 4, 3, 4, 4, 3, 3, NA, 3, 3, NA, … # confirm select will select the columns you want (and not others) analytic_data_survey %&gt;% select(starts_with(&quot;jobsat&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 5 ## $ jobsat1 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3, 3, 3, 4… ## $ jobsat2 &lt;dbl&gt; 5, 5, 5, NA, 5, 5, 4, 5, 4, 4, 3, 5, 3, 4, 5, 5, 4, 3, 5, 4, … ## $ jobsat3 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 3, 3, … ## $ jobsat4 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA, 5, 4, 4, 4, 5, 4, 3, 4, 4… ## $ jobsat5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, NA, 4, 5, 4, 4, 4, 4, 5, 4,… analytic_data_survey &lt;- analytic_data_survey %&gt;% rowwise() %&gt;% mutate(self_esteem = mean(c_across(starts_with(&quot;esteem&quot;)), na.rm = TRUE)) %&gt;% mutate(job_sat = mean(c_across(starts_with(&quot;jobsat&quot;)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(-starts_with(&quot;esteem&quot;)) %&gt;% select(-starts_with(&quot;jobsat&quot;)) When you see ungroup() in this context you can think of it as “turn off rowwise”. We can see our data now has the self esteem column and no esteem items. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 6 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, 17, N… ## $ sex &lt;fct&gt; male, female, male, female, male, female, male, female, m… ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, hazel, blue, brown, hazel, … ## $ self_esteem &lt;dbl&gt; 3.200000, 3.800000, 3.800000, 3.000000, 3.400000, 3.50000… ## $ job_sat &lt;dbl&gt; 4.000000, 5.000000, 4.400000, 3.500000, 4.000000, 3.80000… 3.10 Surveys: Multiple Occasions library(tidyverse) raw_data_survey &lt;- read_csv(&quot;data_item_time.csv&quot;) analytic_data_survey &lt;- raw_data_survey glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 24 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1… ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, … ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;… ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;brown&quot;, &quot;hazel&quot;, &quot;blue&quot;, NA, &quot;hazel&quot;, &quot;blue… ## $ t1_esteem1 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4, NA, NA, 3, 3, 3,… ## $ t1_esteem2 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, NA, 3, 2, 2, 2, … ## $ t1_esteem3 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, 4, 4, NA, 4, NA, N… ## $ t1_esteem4 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, 4, 3, 3, 4, NA, 3,… ## $ t1_esteem5_rev15 &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2, 3, 2, 2, 3, 3, NA, 3… ## $ t1_jobsat1 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4, 4, 3, 3, 4, 3, 3… ## $ t1_jobsat2_rev15 &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 2, … ## $ t1_jobsat3 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, … ## $ t1_jobsat4 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA, 5, 4, 4, 4, 5, 4… ## $ t1_jobsat5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, NA, 4, 5, 4, 4, 4,… ## $ t2_esteem1 &lt;dbl&gt; 4, 5, 5, 4, NA, 4, 4, 5, 5, 5, 4, 5, 3, 3, 4, 4, 4, … ## $ t2_esteem2 &lt;dbl&gt; 3, 4, 4, 3, 3, 4, 3, 4, 4, 4, 3, 3, 3, 4, 3, 3, 3, 3… ## $ t2_esteem3 &lt;dbl&gt; 5, 5, 5, 4, 5, 5, 3, 5, 5, 4, 5, NA, 5, 3, 5, 3, 3, … ## $ t2_esteem4 &lt;dbl&gt; 4, 5, 5, 4, 5, 5, 5, 5, 4, 5, 3, 5, 4, 4, 5, 3, 4, 4… ## $ t2_esteem5_rev15 &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 4, 4, 3, 4, 4… ## $ t2_jobsat1 &lt;dbl&gt; 4, 6, 5, 4, 4, 4, 4, 6, 4, NA, 4, 5, 5, 4, 4, 5, 4, … ## $ t2_jobsat2_rev15 &lt;dbl&gt; 2, 2, 2, 3, 2, 2, 3, 2, 3, 3, 4, 2, 4, 3, 2, 2, 3, 4… ## $ t2_jobsat3 &lt;dbl&gt; 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 3… ## $ t2_jobsat4 &lt;dbl&gt; 3, 6, 6, 5, 5, 5, 5, 6, 3, 5, 3, 6, 5, 5, 5, 6, 5, 4… ## $ t2_jobsat5 &lt;dbl&gt; 6, 3, 6, 5, NA, 5, 5, 6, 6, 6, 5, 3, 5, 6, 5, 5, 5, … Handle categorical variables: analytic_data_survey &lt;-analytic_data_survey %&gt;% mutate(id = as.factor(id)) # Turn all columns that are of type character into factors analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(across(.cols = where(is.character), .fns = as_factor)) # Custom reordering of factor levels for sex analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(sex = fct_relevel(sex, &quot;intersex&quot;, &quot;female&quot;, &quot;male&quot;)) # Reordering factor levels by frequency for eye color analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(eye_color = fct_infreq(eye_color)) Create scale scores: # Reverse code items analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(6 - across(.cols = ends_with(&quot;_rev15&quot;)) ) %&gt;% rename_with(.fn = str_remove, .cols = ends_with(&quot;_rev15&quot;), pattern = &quot;_rev15&quot;) analytic_data_survey &lt;- analytic_data_survey %&gt;% rowwise() %&gt;% mutate(esteem_t1 = mean(c_across(starts_with(&quot;t1_esteem&quot;)), na.rm = TRUE)) %&gt;% mutate(esteem_t2 = mean(c_across(starts_with(&quot;t2_esteem&quot;)), na.rm = TRUE)) %&gt;% mutate(jobsat_t1 = mean(c_across(starts_with(&quot;t1_jobsat&quot;)), na.rm = TRUE)) %&gt;% mutate(jobsat_t2 = mean(c_across(starts_with(&quot;t2_jobsat&quot;)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(-starts_with(&quot;t1_esteem&quot;)) %&gt;% select(-starts_with(&quot;t2_esteem&quot;)) %&gt;% select(-starts_with(&quot;t1_jobsat&quot;)) %&gt;% select(-starts_with(&quot;t2_jobsat&quot;)) glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 8 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA, 20, 17, 24, 17, NA,… ## $ sex &lt;fct&gt; male, female, male, female, male, female, male, female, mal… ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, hazel, blue, brown, hazel, bl… ## $ esteem_t1 &lt;dbl&gt; 3.200000, 3.800000, 3.800000, 3.000000, 3.400000, 3.500000,… ## $ esteem_t2 &lt;dbl&gt; 3.8, 4.4, 4.4, 3.6, 4.0, 4.2, 3.6, 4.4, 4.2, 4.2, 3.4, 4.0,… ## $ jobsat_t1 &lt;dbl&gt; 4.000000, 5.000000, 4.400000, 3.500000, 4.000000, 3.800000,… ## $ jobsat_t2 &lt;dbl&gt; 4.20, 4.40, 5.00, 4.20, 4.25, 4.40, 4.20, 5.20, 4.00, 4.50,… But now comes the complicated point wher eyou need to pivot the data to longer. print(analytic_data_survey) ## # A tibble: 300 x 8 ## id age sex eye_color esteem_t1 esteem_t2 jobsat_t1 jobsat_t2 ## &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 23 male blue 3.2 3.8 4 4.2 ## 2 2 22 female brown 3.8 4.4 5 4.4 ## 3 3 18 male hazel 3.8 4.4 4.4 5 ## 4 4 23 female blue 3 3.6 3.5 4.2 ## 5 5 22 male &lt;NA&gt; 3.4 4 4 4.25 ## 6 6 17 female hazel 3.5 4.2 3.8 4.4 ## 7 7 23 male blue 3 3.6 3.6 4.2 ## 8 8 22 female brown 3.8 4.4 4.6 5.2 ## 9 9 17 male hazel 3.6 4.2 3.75 4 ## 10 10 NA female blue 3.6 4.2 3.8 4.5 ## # … with 290 more rows analytic_survey_tidy &lt;- analytic_data_survey %&gt;% pivot_longer(esteem_t1:jobsat_t2, names_to = c(&quot;.value&quot;, &quot;time&quot;), names_pattern = &quot;(.*)_(t.)&quot; ) print(analytic_survey_tidy) ## # A tibble: 600 x 7 ## id age sex eye_color time esteem jobsat ## &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 23 male blue t1 3.2 4 ## 2 1 23 male blue t2 3.8 4.2 ## 3 2 22 female brown t1 3.8 5 ## 4 2 22 female brown t2 4.4 4.4 ## 5 3 18 male hazel t1 3.8 4.4 ## 6 3 18 male hazel t2 4.4 5 ## 7 4 23 female blue t1 3 3.5 ## 8 4 23 female blue t2 3.6 4.2 ## 9 5 22 male &lt;NA&gt; t1 3.4 4 ## 10 5 22 male &lt;NA&gt; t2 4 4.25 ## # … with 590 more rows 3.11 Basic descriptive statistics 3.11.1 The usual suspects One approach is the describe() command from the psych package. psych::describe(analytic_data_survey) ## vars n mean sd median trimmed mad min max range skew ## id* 1 300 150.50 86.75 150.5 150.50 111.19 1.0 300.00 299.00 0.00 ## age 2 297 20.52 2.05 20.0 20.49 2.97 17.0 24.00 7.00 0.08 ## sex* 3 298 2.49 0.51 2.0 2.49 0.74 1.0 3.00 2.00 -0.09 ## eye_color* 4 297 1.99 0.82 2.0 1.99 1.48 1.0 3.00 2.00 0.01 ## esteem_t1 5 300 3.40 0.32 3.4 3.40 0.30 2.5 4.25 1.75 0.06 ## esteem_t2 6 300 3.93 0.34 4.0 3.93 0.30 3.2 4.80 1.60 -0.02 ## jobsat_t1 7 300 3.91 0.43 4.0 3.94 0.37 2.0 5.00 3.00 -0.69 ## jobsat_t2 8 300 4.37 0.42 4.4 4.39 0.30 3.0 5.25 2.25 -0.42 ## kurtosis se ## id* -1.21 5.01 ## age -1.03 0.12 ## sex* -1.64 0.03 ## eye_color* -1.51 0.05 ## esteem_t1 -0.36 0.02 ## esteem_t2 -0.44 0.02 ## jobsat_t1 0.74 0.03 ## jobsat_t2 -0.05 0.02 One approach is the apa.cor.table() command from the apaTables package. library(apaTables) analytic_data_survey %&gt;% select(where(is.numeric)) %&gt;% apa.cor.table() ## ## ## Means, standard deviations, and correlations with confidence intervals ## ## ## Variable M SD 1 2 3 4 ## 1. age 20.52 2.05 ## ## 2. esteem_t1 3.40 0.32 -.04 ## [-.15, .08] ## ## 3. esteem_t2 3.93 0.34 .01 .84** ## [-.10, .13] [.80, .87] ## ## 4. jobsat_t1 3.91 0.43 -.00 .64** .56** ## [-.12, .11] [.56, .70] [.48, .63] ## ## 5. jobsat_t2 4.37 0.42 -.02 .58** .52** .82** ## [-.13, .10] [.50, .65] [.43, .60] [.77, .85] ## ## ## Note. M and SD are used to represent mean and standard deviation, respectively. ## Values in square brackets indicate the 95% confidence interval. ## The confidence interval is a plausible range of population correlations ## that could have caused the sample correlation (Cumming, 2014). ## * indicates p &lt; .05. ** indicates p &lt; .01. ## The tidyverse approach is oddly long but incredibly flexible. More details on why. library(tidyverse) # HMisc package must be installed. # Library command not needed for HMisc package. desired_descriptives &lt;- list( mean = ~mean(.x, na.rm = TRUE), CI95_LL = ~Hmisc::smean.cl.normal(.x)[2], CI95_UL = ~Hmisc::smean.cl.normal(.x)[3], sd = ~sd(.x, na.rm = TRUE), min = ~min(.x, na.rm = TRUE), max = ~max(.x, na.rm = TRUE), n = ~sum(!is.na(.x)) ) row_sum &lt;- analytic_data_survey %&gt;% summarise(across(.cols = where(is.numeric), .fns = desired_descriptives, .names = &quot;{col}___{fn}&quot;)) long_summary &lt;- row_sum %&gt;% pivot_longer(cols = everything(), names_to = c(&quot;var&quot;, &quot;stat&quot;), names_sep = c(&quot;___&quot;), values_to = &quot;value&quot;) summary_table &lt;- long_summary %&gt;% pivot_wider(names_from = stat, values_from = value) summary_table_rounded &lt;- summary_table %&gt;% mutate(across(.cols = where(is.numeric), .fns= round, digits = 3)) %&gt;% as.data.frame() print(summary_table_rounded) ## var mean CI95_LL CI95_UL sd min max n ## 1 age 20.522 20.288 20.756 2.048 17.0 24.00 297 ## 2 esteem_t1 3.403 3.366 3.440 0.324 2.5 4.25 300 ## 3 esteem_t2 3.927 3.889 3.966 0.337 3.2 4.80 300 ## 4 jobsat_t1 3.905 3.856 3.955 0.435 2.0 5.00 300 ## 5 jobsat_t2 4.368 4.320 4.416 0.425 3.0 5.25 300 3.11.2 Cronbach’s alpha If you want Cronbach’s alpha to estimate the reliability of the scale, you can use the alpha command from the psych package with the code below. Note we have to use the item level data we created a copy of, called analytic_data_items. Cronbach’s alpha is labeled “raw alpha” in the output. rxx_alpha &lt;- analytic_data_items %&gt;% select(starts_with(&quot;esteem&quot;)) %&gt;% psych::alpha() print(rxx_alpha$total) ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd ## 0.662221 0.6633526 0.6172639 0.282688 1.970467 0.03035043 3.403 0.3239399 ## median_r ## 0.292737 If you entered data following the style guide recommended here; entering categorical variables by the category name rather than numerically we can quickly convert categorical variable to factors. For example, if you used a data entry convention where you entered male/female in the column for sex rather than 1 and 2 we can quickly convert all of those columns to factors. This because if you followed the naming convention, columns that contain categorical information will be of the character type. This is quickly revealed by a glimpse command: References "]
]
